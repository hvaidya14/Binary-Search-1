// Time Complexity :
// Space Complexity :
// Did this code successfully run on Leetcode :
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach in three sentences only

//Time complexity
O(logn)
//Space complexity
Constant time
class Solution {
    public int search(int[] nums, int target) {
        int low=0,high=0,mid=0;
        if (nums.length == 1) {
            if(nums[nums.length-1] == target) {
                return 0;
            } else {
                return -1;
            }
        }
        if (nums[0] < nums[nums.length-1] && target > nums[nums.length-1]){
            return -1;
        }
        low=0;
        high=nums.length-1;

        while (low <=high) {
            mid = low +(high-low) / 2;
            if(nums[mid] == target) {
                return mid;
            } else {
                if (nums[low] <= nums[mid]) {
                    if (nums[low] <= target && target < nums[mid]) {
                        high = mid-1;
                    } else {
                        low = mid+1;
                    }

                } else {
                    if (nums[mid+1] <= nums[high]) {
                        if (nums[mid] < target && target <= nums[high]) {
                            low = mid + 1;
                        } else {
                            high = mid-1;
                        }
                    }
                }
            }
        }
        return -1;

    }
}
